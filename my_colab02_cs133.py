# -*- coding: utf-8 -*-
"""my Colab02 CS133

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_yyp1lraJAXSkdSadptu07-ghrMtJbLQ

# CS 133: Introduction to Colab
In the previous notebook you learned some Markdown language, how to mount your Google drive and how to link your Google Colab notebook to Kaggle and GitHub. Now we are going to try out some Python code and make some plots using data we read from a url.

**Here is your answer... Create a text box below**

## You can quickly create simulated data within jupyter notebook.
Here we create a normal distribution probability density plot
"""

# Commented out IPython magic to ensure Python compatibility.
'''Normal distribution probability density plot'''
### Import your libraries
import numpy as np
import scipy.stats as stats

### When using the 'inline' backend, your matplotlib graphs will be included in your notebook, next to the code.
# %matplotlib inline
import matplotlib.pyplot as plots
plots.style.use('fivethirtyeight')

mu = 0 # mean
std = 1 # variance
## Return 100 evenly spaced numbers over a specified interval (between -4 and 4)
x = np.linspace(start=-4, stop=4, num=100)
## A probability density function of a normal continuous random distribution
y = stats.norm.pdf(x, mu, std)
plots.plot(x, y)
plots.show()

"""# We can read in input data from url and do some analysis"""

'''Read in input data from url'''
### Import your libraries
from datascience import *
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)
from urllib.request import urlopen
import re

### Write a function to take in url, read it and return data
def read_url(url):
    return re.sub('\\s+', ' ', urlopen(url).read().decode())


### Let's quickly read the book and count number of instances of characters
huck_finn_url = 'https://www.inferentialthinking.com/data/huck_finn.txt'
huck_finn_text = read_url(huck_finn_url)
huck_finn_chapters = huck_finn_text.split('CHAPTER ')[44:]

Table().with_column('Chapters', huck_finn_chapters)

## Count the number of occurences of 'Tom' in each chapter
print("Number of occurences of Tom per chapter ", np.char.count(huck_finn_chapters, 'Tom'))

## Create a table with the counts of three names for each chapter: 'Tom', 'Jim', and 'Huck'.
counts = Table().with_columns([
    'Tom', np.char.count(huck_finn_chapters, 'Tom'),
    'Jim', np.char.count(huck_finn_chapters, 'Jim'),
    'Huck', np.char.count(huck_finn_chapters, 'Huck'),
])

## To see the count table, you can call the table and don't need to use print
counts

# Commented out IPython magic to ensure Python compatibility.
'''Plot the cumulative counts for 43 chapters:'''
## A cumulative count plot will ask how many times in Chapter 1, then how many times in Chapter 1 and 2, and so on.


# %matplotlib inline
## Table method references: https://www.data8.org/datascience/tables.html

## Create a new table and add the chapter numbers
cum_counts = Table().with_column('Chapter', np.arange(1, 44, 1))

## For loop use to iterate over the character names
for character_name in counts.labels:
  ## Add a column to the new table with each character's cumulative appearances
  cum_counts = cum_counts.with_column(
    character_name, counts.column(character_name).cumsum())

## Plot and add a title to the plot. Chapter numbers are on the x-axis
cum_counts.plot(column_for_xticks=0)
plots.title('Cumulative Number of Times Name Appears')
plots.show()

"""# Exercise `#`2
Now it is your turn. Try to do some word counting from the chapters in "The Little Women".  
Do the same thing as the above example for these 5 names: 'Amy', 'Beth', 'Jo', 'Laurie', 'Meg'.  
After you complete the exercise, **upload your code to your GitHub and send me a message via Canvas.**
"""

'''Count character names in "The Little Women"'''
### url to "The Little Women" text
little_women_url = 'https://www.inferentialthinking.com/data/little_women.txt'
little_women_text = read_url(little_women_url)
little_women_chapters = little_women_text.split('CHAPTER ')[1:]


Table().with_column('Chapters', little_women_chapters)

## Create a table with the counts of five names for each chapter: Amy', 'Beth', 'Jo', 'Laurie', and 'Meg'.
counts = Table().with_columns([
    'Amy', np.char.count(little_women_chapters, 'Amy'),
    'Beth', np.char.count(little_women_chapters, 'Beth'),
    'Jo', np.char.count(little_women_chapters, 'Jo'),
    'Laurie', np.char.count(little_women_chapters, 'Laurie'),
    'Meg', np.char.count(little_women_chapters, 'Meg'),
])

# display counts
counts